@page "/flightstatusdisplay"
@inject FlightHubService FlightHub
@implements IDisposable

<h3>Flight Status Board</h3>

@if (updates == null)
{
    <p><em>Waiting for updates...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Flight Number</th>
                <th>Status</th>
                <th>Last Updated</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in updates)
            {
                <tr>
                    <td>@flight.FlightNumber</td>
                    <td>@flight.Status</td>
                    <td>@DateTime.Now.ToString("HH:mm:ss")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FlightStatusUpdateDto>? updates;
    private bool isDisposed = false;

    protected override async Task OnInitializedAsync()
    {
        FlightHub.OnFlightStatusUpdate += HandleFlightStatusUpdate;
        await FlightHub.StartAsync();
    }

    private void HandleFlightStatusUpdate(List<FlightStatusUpdateDto> list)
    {
        if (isDisposed) return;

        updates = list;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        isDisposed = true;
        FlightHub.OnFlightStatusUpdate -= HandleFlightStatusUpdate;
        _ = FlightHub.StopAsync();
    }
}